# -*- coding: utf-8 -*-
"""Copy of Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_PZzkNIRIhmMXX0FNPgF-M3ZxA2NQqU4
"""

import os
import pandas as pd 
import numpy as np                     # For mathematical calculations 
import seaborn as sns                  # For data visualization 
import matplotlib.pyplot as plt        # For plotting graphs 
# %matplotlib inline 
import warnings                        # To ignore any warnings warnings.filterwarnings("ignore")

from google.colab import files
uploaded = files.upload()

import pandas as pd
import io

train   = pd.read_csv(io.StringIO(uploaded['train.csv'].decode('utf-8')))

from google. colab import files
uploaded = files.upload()

test   = pd.read_csv(io.StringIO(uploaded['test.csv'].decode('utf-8')))

train.head()

train.columns

train.dtypes

train.isnull().sum()

train['member_age_buckets'].value_counts(normalize=True).plot.bar()

train['season_holidayed_code'].fillna(train['season_holidayed_code'].mode()[0], inplace=True)
train['state_code_residence'].fillna(train['state_code_residence'].mode()[0], inplace=True)
test['season_holidayed_code'].fillna(test['season_holidayed_code'].mode()[0], inplace=True)
test['state_code_residence'].fillna(test['state_code_residence'].mode()[0], inplace=True)

train.isnull().sum()

train.describe()

train['cluster_code'].value_counts(normalize=True).plot.bar()

train['reservationstatusid_code'].value_counts(normalize=True).plot.bar()

train['channel_code'].value_counts(normalize=True).plot.bar()

train['resort_id'].value_counts(normalize=True).plot.bar()

sns.distplot(train['amount_spent_per_room_night_scaled']); 
 
plt.show()

train['amount_spent_per_room_night_scaled'].plot.box(figsize=(16,5))

train['roomnights'].head()

total=train['numberofadults']+train['numberofchildren']
total1=test['numberofadults']+test['numberofchildren']
train['total']=total
test['total1']=total1

from sklearn.model_selection import train_test_split

X=train[['channel_code','main_product_code','persontravellingid','resort_region_code','room_type_booked_code','roomnights','season_holidayed_code','state_code_residence','state_code_resort','total_pax','booking_type_code','total']]
x=test[['channel_code','main_product_code','persontravellingid','resort_region_code','room_type_booked_code','roomnights','season_holidayed_code','state_code_residence','state_code_resort','total_pax','booking_type_code','total1']]

y=train.amount_spent_per_room_night_scaled

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3) # 70% training and 30% test

from sklearn.preprocessing import StandardScaler

sc = StandardScaler()  
X_train = sc.fit_transform(X_train)  
X_test = sc.transform(X_test)

from sklearn.ensemble import RandomForestRegressor

regressor = RandomForestRegressor(n_estimators=20, random_state=0)  
regressor.fit(X, y)

from sklearn import metrics

print('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred))  
print('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred))  
print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))

y_pred = regressor.predict(x)

test.amount_spent_per_room_night_scaled=y_pred

submission=pd.DataFrame([test.reservation_id,y_pred]).transpose()



pd.DataFrame(submission).to_csv('newrandomforest.csv')

from google.colab import files
files.download('newrandomforest.csv')